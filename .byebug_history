exit
c
data
c
user.save!
user.save
user = User.new(params)
user.save
User.new(params)
params
data["name"]
data
c
data
data["name"]
row.to_hash
row
params
c
e.first
hash_extra.count
hash_extra
tmp_hash = tmp_hash.merge(e.second.merge({"#{e1.first}"=> e1.second}))
tmp_hash
tmp_hash = e.second.merge({"#{e1.first}"=> e1.second})
tmp_hash = e.second.merge({"#{e1.first}"=> e1.second}
tmp_hash = e.second.merge({"#{e1.first}}
e1.second
e1.first
e.first
e
e1
c
hash_result
e[1]
e.second
e.second = e[1]
e.second
e
e[1]
c
hash_result
e1
hash_result
hash_result = hash_result.first.second.merge({"s"=> "sad"})
hash_result.first.second.merge({"s"=> "sad"})
hash_result.first.second + {"s"=> "sad"}
hash_result.first.second 
hash_result.first.secpmd
hash_result.first
hash_result[0]
hash_result
e[1] = e[1].inject({"#{e1.first}"=> e1.second})
c
hash_result
e
e[1] = e[1].merge({"#{e1.first}"=> e1.second}) if !e.second.key?(e1.first) 
c
e[1] = "s"
e[1]
e
e.second
e.second = "s"
e.second = e.second.merge({"#{e1.first}"=> 0})
e1.second
e.second = e.second.merge({"#{e1.first}"=> e1.second})
e
e.second = e.second.merge({"#{e1.first}"=> e1.second})
e.second = e.second.merge({"#{e1.first}"=> e1.second}).
c
e1.to_h
e1.to_hash
e1
c
e1
e.second
e.second = e.second.merge(e1)
e.second.first.first == e1.first
e.second.first
e.second
e.second.key?(e1.first) 
c
e.second.key?(e1.first)
if e.second.key?(e1.first)
e1.first
e1.second
e1
c
hash_result
c
hash_extra.first.first
hash_extra.first
hash_extra
hash_extra.second
hash_extra.second?
hash_extra = hash_extra.merge({"ss"=>0})
hash_extra
hash_extra.second
hash_extra.merge({"ss"=>0})
hash_extra
c
hash_extra[:s]
hash_extra.second
hash_extra
hash_extra.first
hash_extra.second
hash_extra
e1
hash_extra = hash_extra.merge({s:"s"})
hash_extra
hash_extra.second
hash_extra.merge({s:"s"})
hash_extra.first.first
hash_extra
hash_extra.key
hash_extra.first
hash_extra
hash_result.first.second.merge({nigga: "fucker"})
hash_result.first.second
hash_result.first
hash_result
hash_result.first.merge({nigga: "fucker"})
hash_result.first
hash_result.first.first
hash_result.first
hash_result
c
hash_extra
c
z = z.merge(e.first[1])
z = {}
e.first[1]
e.first
c
hash_extra
c
hash_extra
c
hash_extra
c
filtered.first.first[0]
filtered.first.first
filtered.first
filtered
e
e = filtered[0]
filtered
c
filtered
c
filtered
c
request.headers
continue
request.headers
c
params[:title]
params
c
params
request.headers
request
c
params[:title]
params[:title[
params
c
request.headers
request.headers.content-type
request.headers.content
request.headers
request.header
request
params[:title]
params
c
params
c
params[:title]
params
c
user
iser
user_params
params
user_params
user = User.new(user_params)
c
mp\
c
mp[:to] = User.find_by(email: mp[:to]).try(:id)
c
mp[:to] = User.find_by(email: mp[:to]).try(:id)
mp[:to]
mp[:to] = "asd"
mp[:to]
mp
c
message_params[:to]
message_params[:to] = "asd"
message_params[:to] = asd
message_params[:to]
message_params
message_para,s
message_paras
c
min_category.first
min_category
c
min_category
max_category
c
user_vote.group(:degree).order("count_all asc").coun
user_vote.group(:degree).order("count_all asc").count
user_vote.group(:degree).order("count_all desc").count
user_vote.group(:degree).order(:job).count
user_vote.group(:degree).count
user_vote.group(:job).count
user_vote.group(grouped_query, :job).count
filtered.order("count_all DESC")
filtered.order("count_all")
filtered
filtered.order_by("count_all")
filtered.order_by("count_all", desc)
filtered
c
top_education
c
Hash[e]
Hash
e
c
e
e.first
e
c
e
c
e c
tmp_val
tmp_key
e
c
e
c
e
c
e
c
e.first
e.first[0]
e.firste.first[0]
e.first
e.first[0].delete(e.first[1])
e.first
e
